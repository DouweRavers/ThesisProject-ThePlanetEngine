#pragma enable_d3d11_debug_symbols
#pragma kernel GenerateHeatTexture
#pragma kernel GenerateHumidityTexture
#pragma kernel GenerateColorTexture
#pragma kernel GenerateCloudTexture

// Procedural data
float solar_heat;
float height_cooling;
float humidity_factor;
bool preview_heat;
bool has_ocean;

// Texture data
uint height;
uint width;

// Input
Texture2D<float4> base_texture;
Texture2D<float> height_texture;
Texture2D<float> data_texture;

// Output
RWTexture2D<float> heat_texture_out;
RWTexture2D<float> humidity_texture_out;
RWTexture2D<float4> color_texture_out;


[numthreads(1, 1, 1)]
void GenerateHeatTexture(uint3 id : SV_DispatchThreadID)
{
    
    float locational_heat = 1 - abs(base_texture[id.xy].y);
    float altitude_heat = (1 - height_texture[id.xy])/2;
    float heat = pow(locational_heat, 2 * (1 - solar_heat)) * pow(altitude_heat, height_cooling);
    heat_texture_out[id.xy] = heat;
}

[numthreads(1, 1, 1)]
void GenerateHumidityTexture(uint3 id : SV_DispatchThreadID)
{   
    float humidity;
    if (humidity_factor == 0) humidity = height_texture[id.xy] < 0 ? 1 : 0;
    else humidity = pow(humidity_factor, clamp(height_texture[id.xy] * 2, 0, 1));
    if (!has_ocean)
        humidity = 0;
    humidity_texture_out[id.xy] = humidity;
}


[numthreads(1, 1, 1)]
void GenerateColorTexture(uint3 id : SV_DispatchThreadID)
{
    float data = data_texture[id.xy];
    if (preview_heat)
    {
        float3 color;
        if (data < 0.5)
        {
            float heat = data * 2;
            color = float3(heat, heat, 1-heat);   
        }
        else
        {
            float heat = (data - 0.5)  * 2;
            color = float3(1, 1-heat, 0);
        }
        color_texture_out[id.xy] = float4(color, 1);
    }
    else
    {
        color_texture_out[id.xy] = float4(0, 0, data, 1);
    }
}


[numthreads(1, 1, 1)]
void GenerateCloudTexture(uint3 id : SV_DispatchThreadID)
{
    float data = data_texture[id.xy];
    if (preview_heat)
    {
        color_texture_out[id.xy] = float4(data, 0, 1 - data, 1);
    }
    else
    {
        color_texture_out[id.xy] = float4(0, 0, data, 1);
    }
}