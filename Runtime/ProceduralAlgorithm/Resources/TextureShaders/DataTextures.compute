#include "../ShaderLib/noiseSimplex.cginc"

#pragma enable_d3d11_debug_symbols
#pragma kernel GenerateHeightmapTexture
#pragma kernel GenerateHeatTexture
#pragma kernel GenerateHumidityTexture

// Procedural data
uint seed;
float continent_scale;
float solar_heat;
float height_cooling;
float humidity_factor;
bool has_ocean;


// Texture data
uint height;
uint width;

// Input
Texture2D<float4> base_texture;
Texture2D<float> height_texture;

// Output
RWTexture2D<float> height_texture_out;
RWTexture2D<float> heat_texture_out;
RWTexture2D<float> humidity_texture_out;


[numthreads(1, 1, 1)]
void GenerateHeightmapTexture(uint3 id : SV_DispatchThreadID)
{
    float height_value = 0;
    float divider = 0;
    for (float i = 1; i < 10; i++)
    {
        height_value += snoise(continent_scale * i * base_texture[id.xy].xyz + seed) / i;
        divider += 1 / i;
    }
    height_texture_out[id.xy] = height_value / divider;
}




[numthreads(1, 1, 1)]
void GenerateHeatTexture(uint3 id : SV_DispatchThreadID)
{
    
    float locational_heat = 1 - abs(base_texture[id.xy].y);
    float altitude_heat = (1 - height_texture[id.xy]) / 2;
    float heat = pow(locational_heat, 2 * (1 - solar_heat)) * pow(altitude_heat, height_cooling);
    heat_texture_out[id.xy] = heat;
}

[numthreads(1, 1, 1)]
void GenerateHumidityTexture(uint3 id : SV_DispatchThreadID)
{
    float humidity;
    if (humidity_factor == 0)
        humidity = height_texture[id.xy] < 0 ? 1 : 0;
    else
        humidity = pow(humidity_factor, clamp(height_texture[id.xy] * 2, 0, 1));
    if (!has_ocean)
        humidity = 0;
    humidity_texture_out[id.xy] = humidity;
}
